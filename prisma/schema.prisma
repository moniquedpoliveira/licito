// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRADOR
  USER
  GESTOR_CONTRATO
  FISCAL_ADMINISTRATIVO
  FISCAL_TECNICO
  ORDENADOR_DESPESAS
}

enum ChecklistItemStatus {
  PENDENTE
  CONFORME
  NAO_CONFORME
}

enum ChecklistType {
  ADMINISTRATIVA
  TECNICA
}

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String   @unique
  isActive         Boolean  @default(true)
  password         String
  role             UserRole @default(GESTOR_CONTRATO)
  whatsapp         String?
  whatsappVerified Boolean  @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  lastLogin DateTime?

  // Contract relationships
  ContratosCreated     Contrato[] @relation("ContratoCreator")
  FiscalAdministrativo Contrato[] @relation("FiscalAdministrativo")
  FiscalTecnico        Contrato[] @relation("FiscalTecnico")
  FiscalSubstituto     Contrato[] @relation("FiscalSubstituto")

  ChecklistItem      ChecklistItem[]
  ObservationHistory ObservationHistory[]
  Notification       Notification[]

  // Named relations for Esclarecimento
  AskedEsclarecimentos    Esclarecimento[] @relation("AskedBy")
  AnsweredEsclarecimentos Esclarecimento[] @relation("AnsweredBy")
  Esclarecimento          Esclarecimento[]

  @@index([email])
}

model Contrato {
  id                     String    @id @default(uuid())
  numeroContrato         String    @unique
  processoAdministrativo String    @unique
  modalidadeLicitacao    String
  objeto                 String
  orgaoContratante       String
  nomeContratada         String
  cnpjContratada         String
  representanteLegal     String
  enderecoContratada     String
  telefoneContratada     String
  emailContratada        String
  valorTotal             Float
  dataAssinatura         DateTime
  vigenciaInicio         DateTime
  vigenciaTermino        DateTime
  dataBaseReajuste       DateTime?
  indiceReajuste         String?
  tipoGarantia           String?
  valorGarantia          Float?
  vigenciaGarantia       DateTime?
  gestorContrato         String
  portariaGestor         String?
  emailGestor            String?
  telefoneGestor         String?

  // New foreign key relationships for fiscais
  fiscalAdministrativoId String?
  fiscalAdministrativo   User?   @relation("FiscalAdministrativo", fields: [fiscalAdministrativoId], references: [id])
  fiscalTecnicoId        String?
  fiscalTecnico          User?   @relation("FiscalTecnico", fields: [fiscalTecnicoId], references: [id])
  fiscalSubstitutoId     String?
  fiscalSubstituto       User?   @relation("FiscalSubstituto", fields: [fiscalSubstitutoId], references: [id])

  // Legacy string fields for fiscal information - keep for migration
  fiscalAdministrativoLegacy String?
  fiscalTecnicoLegacy        String?
  fiscalSubstitutoLegacy     String?
  portariaFiscalAdm          String?
  portariaFiscalTec          String?
  portariaFiscalSub          String?
  identificacaoFiscalTec     String?
  emailFiscalAdm             String?
  telefoneFiscalAdm          String?
  emailFiscalTec             String?
  telefoneFiscalTec          String?
  emailFiscalSub             String?

  sancaoAdministrativa String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user          User?           @relation("ContratoCreator", fields: [userId], references: [id])
  userId        String?
  ChecklistItem ChecklistItem[]

  @@index([numeroContrato])
  @@index([cnpjContratada])
  @@index([userId])
  @@index([fiscalAdministrativoId])
  @@index([fiscalTecnicoId])
  @@index([fiscalSubstitutoId])
  @@map("contratos")
}

model Checklist {
  id        String          @id @default(uuid())
  text      String
  type      ChecklistType
  createdAt DateTime        @default(now())
  items     ChecklistItem[]

  @@unique([text, type])
}

model ChecklistItem {
  id                 String              @id @default(uuid())
  contratoId         String
  checklistId        String
  status             ChecklistItemStatus @default(PENDENTE)
  currentObservation String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  contrato           Contrato             @relation(fields: [contratoId], references: [id])
  checklist          Checklist            @relation(fields: [checklistId], references: [id])
  observationHistory ObservationHistory[]
  esclarecimentos    Esclarecimento[]
  User               User?                @relation(fields: [userId], references: [id])
  userId             String?
  Notification       Notification[]
}

model ObservationHistory {
  id              String              @id @default(uuid())
  checklistItemId String
  status          ChecklistItemStatus
  observation     String
  userId          String
  createdAt       DateTime            @default(now())

  checklistItem ChecklistItem @relation(fields: [checklistItemId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model Esclarecimento {
  id              String    @id @default(uuid())
  checklistItemId String
  question        String
  askedById       String
  answer          String?
  answeredById    String?
  askedAt         DateTime  @default(now())
  answeredAt      DateTime?

  checklistItem ChecklistItem  @relation(fields: [checklistItemId], references: [id])
  askedBy       User           @relation("AskedBy", fields: [askedById], references: [id])
  answeredBy    User?          @relation("AnsweredBy", fields: [answeredById], references: [id])
  Notification  Notification[]
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?
}

model Notification {
  id               String   @id @default(uuid())
  userId           String
  checklistItemId  String?
  esclarecimentoId String?
  type             String
  read             Boolean  @default(false)
  createdAt        DateTime @default(now())

  user           User            @relation(fields: [userId], references: [id])
  checklistItem  ChecklistItem?  @relation(fields: [checklistItemId], references: [id])
  esclarecimento Esclarecimento? @relation(fields: [esclarecimentoId], references: [id])
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id              String   @id @default(cuid())
  role            String // 'user' | 'assistant' | 'system'
  content         String?
  createdAt       DateTime @default(now())
  chatId          String
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  toolInvocations Json? // Store tool invocations as JSON
}
